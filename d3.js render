<!DOCTYPE html>
<meta charset="utf-8">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width, user-scalable=no">
        <title>d3 test page</title>
       
        <script src="https://d3js.org/d3.v5.min.js"></script>

        <script type='text/javascript'>
            var url = "http://localhost:7474/db/data/transaction/commit";
            var cred = "Basic" + " " + btoa("neo4j:1234");
            var query = '{"statements":[{ "statement": "WITH \'30481145\' AS pid OPTIONAL MATCH zz = (p:Paper{id:pid})<-[a_r:ACCESSION]-(acs:Accession) OPTIONAL MATCH pp = (p:Paper{id:pid})<-[a_r:ACCESSION]-(acs:Accession)<-[r_r:RELATED_TO]-(r_p:Related_paper) RETURN *", "resultDataContents":["graph"]}]}';
            var params = {
                        headers:{
                        "Authorization": cred,
                        "Content-Type": "application/json",
                        "Accept":"application/json; charset=UTF-8"},
                        body:query,
                        method:"POST"
                       
                        };

                function idIndex(a,id) {
              for (var i=0;i<a.length;i++) {
                if (a[i].id == id) return i;}
              return null;
            }; 





           

            
          var svg = d3.select("svg");
                  var width = 960,
                  height = 1000;
/*
        var div = d3.select("body").append("div")
                      .attr("class", "tooltip")
                      .style("opacity", 0);
            
*/

            var color = d3.scaleOrdinal(d3.schemeCategory10);
       

          /*  svg = d3.select("body").append('svg')
                  .attr("width", width)
                  .attr("height", height)

*/
   
            function handleData(res){
                      //console.log('myJson: ', res);
                      var nodes=[], links=[];
                  res.results[0].data.forEach(function (row) {
                row.graph.nodes.forEach(function (n) {
                 if (idIndex(nodes,n.id) == null) {
                    if (n.labels[0] == "Paper") {
                    nodes.push({id:n.id, label:n.labels[0], data:n.properties, group:1})};
                    if (n.labels[0] == "Accession") {
                    nodes.push({id:n.id, label:n.labels[0], data:n.properties, group:2})};
                    if (n.labels[0] == "Related_paper") {
                    nodes.push({id:n.id, label:n.labels[0], data:n.properties, group:3})};
                }

                     });
                     links = links.concat( row.graph.relationships.map(function(r) {
                       return {source:idIndex(nodes,r.startNode),target:idIndex(nodes,r.endNode), value:1, type:r.type};
                     }));
                  });

                  viz = {nodes:nodes, links:links};
                  
                  main(viz);
                  
                  };

      
                  
                  fetch(url,params)
                    .then(function(response) {
                      return response.json();
                    })
                    .then(function(myJson) {
                       handleData(myJson);
                       
                       
                    })

              .catch(error=>console.log(error));




 function main(viz){
     
          var graph = viz;
          var labels = ["Paper","Accession number", "Related paper"];


          var svg = d3.select("svg");


                var width = 960,
                height = 1000;


            svg = svg.call(d3.zoom().on("zoom", zoomed)).on("dblclick.zoom", null).append("g");   //disabled doubleclick zoom
            

            

            var div = d3.select("body").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);


            var color = d3.scaleOrdinal(d3.schemeCategory10);

            var simulation = d3.forceSimulation()
                .force("link", d3.forceLink())
                .force("charge", d3.forceManyBody().strength(-100))
                .force("center", d3.forceCenter(width / 2, height / 2))
                .force("collide", d3.forceCollide().radius(14).iterations(2))
                .force("y", d3.forceY(0))
                .force("x", d3.forceX(0))
                .on("tick", onSimulationTick);
               


          var link = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(graph.links)
            .enter().append("line")
            .attr("stroke", "gray") ;


          var node = svg.append("g")
              .attr("class", "nodes")
              .selectAll("circle")
              .data(graph.nodes)
              .enter().append("circle")
              .attr("r", 10)
              .attr("fill", function(d){return color(d.group);})
              .call(d3.drag()
                  .on("start", dragstarted)
                  .on("drag", dragged)
                  .on("end", dragended))

              //mouse events for nodes
              .on("mouseover", function(d) {
                         
                         div.transition()
                           .duration(200)
                           .style("opacity", .9);
                         div.html(tooltiptext(d))
                           .style("left", (d3.event.pageX + 15) + "px")
                           .style("top", (d3.event.pageY - 28) + "px");
                         })
               .on("mouseout", function(d) {
                         div.transition()
                           .duration(500)
                           .style("opacity", 0);
                         })
               .on("dblclick", function(d){window.open('https://europepmc.org/abstract/'+ d.data.source + '/' + d.data.id, '_blank'); }); //open webpage of node on doubleclick


      

          simulation
              .nodes(graph.nodes)
              .on("tick", ticked);

          simulation.force("link")
              .links(graph.links);



        //legend//
          var legend = svg.selectAll(".legend")
              .data(color.domain())
              .enter().append("g")
              .attr("class", "legend")
              .attr("transform", function(d, i) { return "translate(20  ," + (width/3 + (i*20)) + ")"; });

          legend.append("rect")
              .attr("x", width - 18)
              .attr("width", 18)
              .attr("height", 18)
              .style("fill", color);

          legend.append("text")
              .attr("x", width - 24)
              .attr("y", 9)
              .attr("dy", ".35em")
              .style("text-anchor", "end")
              .text(function(d) {return labels[d-1]});


  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }

           var simulationDurationInMs = 50;
          var startTime = Date.now();
          var endTime = startTime + simulationDurationInMs;


        function onSimulationTick() {
            if (Date.now() < endTime) {
                
            } else {
                simulation.stop();
            }
        } 

function tooltiptext(d){


      if(d.group == 1 || 3)
      {
            var s = ""
            var labs = Object.keys(d.data);

            labs.forEach(function(label)
                {s +=label + ": " + d.data[label] + "</br></br>"})
               
      };
      
      if(d.group == 2)
      {
            var s = ""
            var labs = Object.keys(d.data);

            labs.forEach(function(label)
                {s +=label + ": " + d.data[label] + "</br></br>"})
              
      };
      return s;
                         
}


function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

function zoomed() {
  svg.attr("transform", "translate(" + d3.event.transform.x + "," + d3.event.transform.y + ")" + " scale(" + d3.event.transform.k + ")");
}



    }

</script>



<style>
      body {
            margin: 0;
            padding: 0;
            
        }

        #canvas {
            position: absolute;
            width: 100%;
            height: 100%;
            border: 1px solid red;
        }
            .links line {
            stroke-opacity: 0.6;
            stroke-width: 1px;
            fill: none;
          }

          .nodes circle {
            stroke: #333;
            stroke-width: 1.5px;
            cursor: pointer;
          }
            
            div.tooltip {
              position: absolute;
              text-align: left;
              width: 200px;
              height: relative;
              padding: 2px;
              font: 12px sans-serif;
              background: moccasin;
              border: 2px;
              border-style: solid;
              border-color: black;
              border-radius: 8px;
              pointer-events: none;
            }

</style>

</head>
<body>


<svg id="graph" width="1000" height="1000" ></svg>
</body>
</html>
